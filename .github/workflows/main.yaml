name: CI/CD_Homework

on:
  push:
    branches:
      - master
env:
  REGISTRY: valento/flask    
jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "E303,W292,E265,E302,E231,W293,E251,E501,F401,W291"    

  build_and_push:
    runs-on: ubuntu-latest
    name: Build and push docker image
    needs: lint
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - id: commit_hash
        run: echo "::set-output name=commit_hash::${GITHUB_SHA::7}"

        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ steps.commit_hash.outputs.commit_hash }}

  deploy:
    needs: build_and_push
    env:
      USERNAME: ubuntu
    strategy:
      fail-fast: false
      matrix:
        os: ['35.158.214.75', '35.156.142.47']
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 instanse via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ matrix.os }}
          username: ${{ env.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: ${{ secrets.DOCKER_USER }}, ${{ secrets.DOCKERHUB_TOKEN }}
          port: 22
          script: |
            # login docker
            sudo docker login -u $DOCKER_USER -p $DOCKERHUB_TOKEN
            
            sudo docker-compose down
            
            # Create docker-compose
            echo \
            "version: '2.1'
            services:
              # app:
              #   container_name: flask_app
              #   image: ${{ env.REGISTRY }}:${{ needs.build_and_push.outputs.commit_hash }}
              #   ports:
              #     - 5000:5000
              #   restart: always
              #   depends_on:
              #       db:
              #           condition: service_healthy
              db:
                container_name: mysql_db
                image: mysql:8.0.29
                ports:
                  - 3306:3306
                restart: always
                environment:
                  MYSQL_ROOT_PASSWORD: devops
                  MYSQL_USER: devops
                  MYSQL_PASSWORD: devops
                  MYSQL_DATABASE: student
                volumes:
                  - db:/var/lib/mysql
                healthcheck:
                  test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
                  timeout: 20s
                  retries: 10
            volumes:
              db:" > docker-compose.yml
            sudo docker-compose up -d

            # # login docker
            # docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
            # docker stop flask-app
            # docker rm flask-app
            # # Run a new container from a new image
            # docker run -d \
            # --restart always \
            # -p 5000:5000 \
            # --name flask-app \
            # ${{ env.REGISTRY }}:${{ needs.build_and_push.outputs.commit_hash }}
      
  #
  report:
    runs-on: ubuntu-latest
    name: Availability check
    needs: deploy
    strategy:
      matrix:
        host: ['35.158.214.75', '35.156.142.47']
    env:
      PORT: 5000
    steps:
      - name: Curl Endpoint
        run: curl http://${{ matrix.host }}:${{ env.PORT }}/api/health-check/ok